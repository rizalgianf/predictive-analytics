# -*- coding: utf-8 -*-
"""predictive-anlaytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSPnpnsHRbDtVKrIeVumLFztr8mM-Ckj

**Import Library**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

"""**Scrape data harga emas**"""

import requests
import pandas as pd

# Scrape data dengan API
response = requests.get("https://pluang.com/api/asset/gold/pricing?daysLimit=20000")
coba = response.json()

# manipulasi data dan transformasi periode data
hargaemas = pd.DataFrame(coba['data']['history'])
hargaemas['tgl'] = pd.to_datetime(hargaemas['updated_at'].str[:10], format="%Y-%m-%d")
hargaemas = hargaemas.iloc[:, [1, 2, 3, 5]]

hargaemas.to_csv('hargaemas.csv', index=False)

# sekilas data
hargaemas.head()

"""**Praproses Data**

"""

# Membaca file CSV
file_path = 'hargaemas.csv'
data = pd.read_csv(file_path)

# Mengonversi kolom 'tgl' menjadi tipe data datetime dan menjadikannya sebagai indeks
data['tgl'] = pd.to_datetime(data['tgl'])
data.set_index('tgl', inplace=True)

# Pilih harga jual (atau beli) untuk forecasting
price_data = data['sell']  #  bisa mengganti 'sell' dengan 'buy' jika ingin memprediksi harga beli

# Visualisasi data harga jual emas
plt.figure(figsize=(10, 6))
plt.plot(price_data)
plt.title('Harga Jual Emas Historis')
plt.xlabel('Tanggal')
plt.ylabel('Harga Emas (IDR)')
plt.grid(True)
plt.show()

"""**Membangun Model ARIMA untuk Time Series Forecasting**"""

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

plt.figure(figsize=(12, 6))
plt.subplot(121)
plot_acf(price_data, lags=50, ax=plt.gca())
plt.subplot(122)
plot_pacf(price_data, lags=50, ax=plt.gca())
plt.show()

"""**Membangun Model ARIMA**"""

# Gabungkan data dengan tanggal duplikat (ambil rata-rata atau nilai terakhir)
price_data = price_data.groupby(price_data.index).last()

# Pastikan index urut dan set frekuensi harian
price_data = price_data.sort_index()
price_data = price_data.asfreq('D')

# Membangun model ARIMA
model = ARIMA(price_data, order=(5, 1, 0))
model_fit = model.fit()

print(model_fit.summary())

"""**Prediksi Harga Emas di Masa Depan**"""

# Prediksi harga emas untuk 3 tahun ke depan (1095 hari)
forecast_3y = model_fit.forecast(steps=1095)

# Buat indeks tanggal untuk hasil prediksi (dimulai setelah tanggal terakhir data historis)
last_date = price_data.index[-1]  # Mendapatkan tanggal terakhir data historis
future_dates = pd.date_range(last_date + pd.Timedelta(days=1), periods=1095, freq='D')

# Visualisasi hasil prediksi 3 tahun ke depan dengan garis merah bergelombang (dashed)
plt.figure(figsize=(12, 6))
plt.plot(price_data, label='Harga Emas Historis')
plt.plot(future_dates, forecast_3y, label='Prediksi 3 Tahun ke Depan', color='red', linestyle='--')
plt.legend()
plt.title('Prediksi Harga Emas 3 Tahun ke Depan Menggunakan ARIMA')
plt.xlabel('Tanggal')
plt.ylabel('Harga Emas (IDR)')
plt.grid(True)
plt.show()

"""**Evaluasi Model**"""

aligned_true, aligned_pred = price_data.align(model_fit.fittedvalues, join='inner')
mask = (~aligned_true.isna()) & (~aligned_pred.isna())
mae = mean_absolute_error(aligned_true[mask], aligned_pred[mask])
rmse = np.sqrt(mean_squared_error(aligned_true[mask], aligned_pred[mask]))

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")

"""**Penyempurnaan Model Dengan Sarima**"""

from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Membangun model SARIMA dengan penyesuaian untuk komponen musiman dan AR
sarima_model = SARIMAX(price_data, order=(5, 1, 0), seasonal_order=(1, 1, 1, 12))  # Menambahkan MA pada musim (1, 1, 1, 12)
sarima_model_fit = sarima_model.fit()

# Ringkasan model SARIMA
print(sarima_model_fit.summary())

# Memprediksi harga emas dengan SARIMA untuk 3 tahun ke depan (1095 hari)
sarima_forecast = sarima_model_fit.forecast(steps=1095)

# Buat indeks tanggal untuk hasil prediksi dimulai setelah data terakhir
last_date = price_data.index[-1]  # Mendapatkan tanggal terakhir data historis
future_dates = pd.date_range(last_date + pd.Timedelta(days=1), periods=1095, freq='D')

# Visualisasi hasil prediksi SARIMA untuk 3 tahun ke depan
plt.figure(figsize=(12, 6))
plt.plot(price_data, label='Harga Emas Historis')
plt.plot(future_dates, sarima_forecast, label='Prediksi Harga Emas SARIMA', color='green')
plt.legend()
plt.title('Prediksi Harga Emas 3 Tahun ke Depan Menggunakan SARIMA')
plt.xlabel('Tanggal')
plt.ylabel('Harga Emas (IDR)')
plt.grid(True)
plt.show()

# Untuk evaluasi, prediksi in-sample SARIMA
sarima_in_sample_pred = sarima_model_fit.fittedvalues

# Align dengan data asli
aligned_true_sarima, aligned_pred_sarima = price_data.align(sarima_in_sample_pred, join='inner')
mask_sarima = (~aligned_true_sarima.isna()) & (~aligned_pred_sarima.isna())

mae_sarima = mean_absolute_error(aligned_true_sarima[mask_sarima], aligned_pred_sarima[mask_sarima])
rmse_sarima = np.sqrt(mean_squared_error(aligned_true_sarima[mask_sarima], aligned_pred_sarima[mask_sarima]))

print(f"MAE SARIMA: {mae_sarima:.2f}")
print(f"RMSE SARIMA: {rmse_sarima:.2f}")